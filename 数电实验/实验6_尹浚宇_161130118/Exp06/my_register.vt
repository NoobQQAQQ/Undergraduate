// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "10/29/2018 19:52:32"
                                                                                
// Verilog Test Bench template for design : my_register
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module my_register_vlg_tst();
// constants                                           
// general purpose registers
// reg eachvec;
// test vector input registers
reg clk;
reg [7:0] in;
reg [2:0] mode;
reg single;
// wires                                               
wire [7:0]  out;

// assign statements (if any)                          
my_register i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.in(in),
	.mode(mode),
	.out(out),
	.single(single)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
	clk = 0; single = 0; in = 0; #1;
	mode = 1; #1;
	in = 8'b11111111; #2;
	in = 8'b00001111; #2;
	in = 8'b10101111; #2;
	mode = 2; #4;
	mode = 3; #4;
	mode = 4; #4;
	mode = 5; #4;
	single = 1; #4;
	mode = 6; #4;
	mode = 7; #4;
	mode = 0; #4;
	$stop;
// --> end                                             
// $display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
	clk = ~clk; #1;
// @eachvec;                                              
// --> end                                             
end                                                    
endmodule

