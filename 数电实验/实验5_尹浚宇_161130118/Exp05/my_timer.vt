// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "10/20/2018 15:12:31"
                                                                                
// Verilog Test Bench template for design : my_timer
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module my_timer_vlg_tst();
// constants                                           
// general purpose registers
// reg eachvec;
// test vector input registers
reg clear;
reg clk;
reg en;
reg reset;
reg s_p;
// wires                                               
wire over_flag;
wire [6:0]  seg1;
wire [6:0]  seg2;
wire sp_flag;

// assign statements (if any)                          
my_timer i1 (
// port map - connection between master ports and signals/registers   
	.clear(clear),
	.clk(clk),
	.en(en),
	.over_flag(over_flag),
	.reset(reset),
	.s_p(s_p),
	.seg1(seg1),
	.seg2(seg2),
	.sp_flag(sp_flag)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
	clk = 0; #1;
	en = 1; #1;
	clear = 1; #1;
	reset = 1; #1;
	s_p = 0; #51000000;
	s_p = 1; #10;
	#110000001;
	$stop;
// --> end                                             
// $display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
	clk = ~clk; #1;
// @eachvec;                                              
// --> end                                             
end                                                    
endmodule

